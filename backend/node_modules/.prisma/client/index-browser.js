
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  fullName: 'fullName',
  email: 'email',
  phone: 'phone',
  role: 'role',
  region: 'region',
  district: 'district',
  city: 'city',
  position: 'position',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FamilyScalarFieldEnum = {
  id: 'id',
  caseNumber: 'caseNumber',
  familyName: 'familyName',
  address: 'address',
  region: 'region',
  registrationAddress: 'registrationAddress',
  district: 'district',
  city: 'city',
  status: 'status',
  riskLevel: 'riskLevel',
  riskFactors: 'riskFactors',
  registrationDate: 'registrationDate',
  lastUpdate: 'lastUpdate',
  isActive: 'isActive',
  inactiveReason: 'inactiveReason',
  notes: 'notes',
  inspectionStatus: 'inspectionStatus',
  familyType: 'familyType',
  housingType: 'housingType',
  employment: 'employment',
  workplace: 'workplace',
  tzhsReason: 'tzhsReason',
  nbReason: 'nbReason',
  familyIncome: 'familyIncome',
  needsSupport: 'needsSupport',
  needsEducation: 'needsEducation',
  needsHealth: 'needsHealth',
  needsPolice: 'needsPolice',
  hasDisability: 'hasDisability',
  contactPhone: 'contactPhone',
  contactEmail: 'contactEmail',
  incomeSource: 'incomeSource',
  monthlyIncome: 'monthlyIncome',
  socialBenefits: 'socialBenefits',
  referralSource: 'referralSource',
  primaryLanguage: 'primaryLanguage',
  hasInterpreterNeeded: 'hasInterpreterNeeded',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.FamilyMemberScalarFieldEnum = {
  id: 'id',
  familyId: 'familyId',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  birthDate: 'birthDate',
  gender: 'gender',
  relationship: 'relationship',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  documentIssueDate: 'documentIssueDate',
  documentExpiryDate: 'documentExpiryDate',
  registrationAddress: 'registrationAddress',
  education: 'education',
  grade: 'grade',
  institution: 'institution',
  course: 'course',
  funding: 'funding',
  meals: 'meals',
  notes: 'notes',
  status: 'status',
  isActive: 'isActive',
  citizenship: 'citizenship',
  ethnicity: 'ethnicity',
  maritalStatus: 'maritalStatus',
  phoneNumber: 'phoneNumber',
  email: 'email',
  employment: 'employment',
  healthStatus: 'healthStatus',
  disabilities: 'disabilities',
  specialNeeds: 'specialNeeds',
  isHeadOfHousehold: 'isHeadOfHousehold',
  primaryCaregiver: 'primaryCaregiver',
  incomeAmount: 'incomeAmount',
  incomeSource: 'incomeSource',
  medicalInsurance: 'medicalInsurance',
  chronicConditions: 'chronicConditions',
  allergies: 'allergies',
  medications: 'medications'
};

exports.Prisma.SupportMeasureScalarFieldEnum = {
  id: 'id',
  familyId: 'familyId',
  memberId: 'memberId',
  type: 'type',
  description: 'description',
  category: 'category',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  provider: 'provider',
  result: 'result',
  notes: 'notes',
  createdAt: 'createdAt',
  priority: 'priority',
  cost: 'cost',
  fundingSource: 'fundingSource',
  contactPerson: 'contactPerson',
  contactPhone: 'contactPhone',
  contactEmail: 'contactEmail',
  frequency: 'frequency',
  location: 'location',
  followUpDate: 'followUpDate',
  evaluationDate: 'evaluationDate',
  effectiveness: 'effectiveness',
  createdById: 'createdById'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  fileUrl: 'fileUrl',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  familyId: 'familyId',
  memberId: 'memberId',
  supportId: 'supportId',
  uploadDate: 'uploadDate',
  notes: 'notes',
  category: 'category',
  expirationDate: 'expirationDate',
  isConfidential: 'isConfidential',
  tags: 'tags',
  status: 'status',
  uploadedById: 'uploadedById'
};

exports.Prisma.FamilyHistoryScalarFieldEnum = {
  id: 'id',
  familyId: 'familyId',
  action: 'action',
  description: 'description',
  timestamp: 'timestamp',
  userId: 'userId',
  changedFields: 'changedFields',
  previousValues: 'previousValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt',
  priority: 'priority',
  category: 'category',
  expiresAt: 'expiresAt',
  actionUrl: 'actionUrl',
  actionLabel: 'actionLabel',
  isArchived: 'isArchived',
  creatorId: 'creatorId',
  recipientId: 'recipientId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  User: 'User',
  Family: 'Family',
  FamilyMember: 'FamilyMember',
  SupportMeasure: 'SupportMeasure',
  Document: 'Document',
  FamilyHistory: 'FamilyHistory',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
